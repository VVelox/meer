#!/usr/bin/perl

#############################################################################
# external-program-http-get - Simple routine that takes Surcata/Sagan EVE
# data, parses it and sends a "block" request to a remote URL via a HTTP
# GET request.
# 
# Champ Clark III (cclark@quadrantsec.com)
# 2019/07/17
#
#############################################################################

use JSON; 
use Net::Subnet qw(subnet_matcher);
use LWP::UserAgent;

use warnings; 
use strict;

my $LOG_FILE = "/tmp/firewall.log"; 			# Log file
my $block_url = "http://example.com/blockip="; 		# URL to send blocks to.

#############################################################################
# The $white_list are IP address that you do NOT to send blocks for.  You'll
# likely want to put your network (internal & external) IP address ranges 
# within this list!
#############################################################################

my $white_list = subnet_matcher qw(
    10.0.0.0/8 
    192.168.0.0/16
    172.16.0.0/12
    169.254.0.0/16
    fd00::/8
);

#############################################################################
# You shouldn't need to mess with anything else below this
#############################################################################

my $json_d;
my $url;
my $response;
my $target;
my $src_ip;
my $dest_ip;
my $signature;
my $sig_id;

my $ua = LWP::UserAgent->new;

# Handle signals cleanly...

$SIG{'INT'} = \&Signal_Handler;
$SIG{'TERM'} = \&Signal_Handler;
$SIG{'HUP'} = \&Signal_Handler;

open(LOG, ">> $LOG_FILE") || die "Cannot open $LOG_FILE!\n"; 

# Wait on stdin and collect the incoming json.

while (<>) {

   Log("------------------------------------------------------------------------------");
   Log("** Received EVE: " . $_);

   $json_d = decode_json($_); 

   $src_ip = $json_d->{src_ip}; 
   $dest_ip = $json_d->{dest_ip}; 
   $signature = $json_d->{alert}{signature};
   $sig_id = $json_d->{alert}{signature_id};

   # Do some quick sanity checks for the data comming in.

   if ( $src_ip eq "" ) 
      { 
      Log("Error.  Soruce IP address is missing or couldn't be parsed."); 
      exit(1);
      }

   if ( $dest_ip eq "" ) 
      { 
      Log("Error.  Destination IP address is missing or couldn't be parsed."); 
      exit(1);
      }

   if ( $signature eq "" ) 
      { 
      Log("Error.  The 'siganture'  missing or couldn't be parsed."); 
      exit(1);
      }

   if ( $sig_id eq "" ) 
      { 
      Log("Error.  The 'siganture_id'  missing or couldn't be parsed."); 
      exit(1);
      }


   Log("Parsed $src_ip -> $dest_ip"); 

   # Got good data.  Try to figure out what "side" of the connection to send
   # the block request for. 

   if ( !$white_list->($dest_ip) ) 
	{
	$target = $dest_ip;
	}

   if ( !$white_list->($src_ip) ) 
	{
	$target = $src_ip;
	}

   if ( !$target ) 
	{
	Log("No usable firewall targets in $src_ip -> $dest_ip.  Abort");
	exit(0);
	}

   # Send block request! 
   
   Log("Target to firewall is $target for '$signature' [Sig ID: $sig_id]");

   $url = $block_url . $target; 

   Log("Sending $url");

   $ua->timeout(60);
   $ua->agent("Meer Blocking Agent");
   $response = $ua->get($url);

   # Check block request response. 

   if ( $response->is_success ) 
      {
      Log("Successfully send to $url [" . $response->status_line . "]"); 
      } else { 
      Log("Failed to send to $url [" . $response->status_line . "]");
      }

}

Log("Execution complete.");

close(LOG); 
exit(0);

#############################################################################
# Signal_Handler - What to do on signals..
#############################################################################

sub Signal_Handler {

close(LOG); 
exit(0);

}

#############################################################################
# Log - Simple "logging" routine to include timestamp. 
#############################################################################

sub Log {

  our $s;
  local($s) = @_;
  my $dt = localtime();
  print LOG "[$dt] $s\n"; 

}

